/* automatically generated by rust-bindgen 0.58.1 */

pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const ESPEAK_API_REVISION: u32 = 12;
pub const espeakRATE_MINIMUM: u32 = 80;
pub const espeakRATE_MAXIMUM: u32 = 450;
pub const espeakRATE_NORMAL: u32 = 175;
pub const espeakINITIALIZE_PHONEME_EVENTS: u32 = 1;
pub const espeakINITIALIZE_PHONEME_IPA: u32 = 2;
pub const espeakINITIALIZE_DONT_EXIT: u32 = 32768;
pub const espeakCHARS_AUTO: u32 = 0;
pub const espeakCHARS_UTF8: u32 = 1;
pub const espeakCHARS_8BIT: u32 = 2;
pub const espeakCHARS_WCHAR: u32 = 3;
pub const espeakCHARS_16BIT: u32 = 4;
pub const espeakSSML: u32 = 16;
pub const espeakPHONEMES: u32 = 256;
pub const espeakENDPAUSE: u32 = 4096;
pub const espeakKEEP_NAMEDATA: u32 = 8192;
pub const espeakPHONEMES_SHOW: u32 = 1;
pub const espeakPHONEMES_IPA: u32 = 2;
pub const espeakPHONEMES_TRACE: u32 = 8;
pub const espeakPHONEMES_MBROLA: u32 = 16;
pub const espeakPHONEMES_TIE: u32 = 128;
pub const ESPEAKNG_DEFAULT_VOICE: &'static [u8; 3usize] = b"en\0";
pub type size_t = ::std::os::raw::c_ulong;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED: espeak_EVENT_TYPE = 0;
pub const espeak_EVENT_TYPE_espeakEVENT_WORD: espeak_EVENT_TYPE = 1;
pub const espeak_EVENT_TYPE_espeakEVENT_SENTENCE: espeak_EVENT_TYPE = 2;
pub const espeak_EVENT_TYPE_espeakEVENT_MARK: espeak_EVENT_TYPE = 3;
pub const espeak_EVENT_TYPE_espeakEVENT_PLAY: espeak_EVENT_TYPE = 4;
pub const espeak_EVENT_TYPE_espeakEVENT_END: espeak_EVENT_TYPE = 5;
pub const espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED: espeak_EVENT_TYPE = 6;
pub const espeak_EVENT_TYPE_espeakEVENT_PHONEME: espeak_EVENT_TYPE = 7;
pub const espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE: espeak_EVENT_TYPE = 8;
pub type espeak_EVENT_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct espeak_EVENT {
    pub type_: espeak_EVENT_TYPE,
    pub unique_identifier: ::std::os::raw::c_uint,
    pub text_position: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub audio_position: ::std::os::raw::c_int,
    pub sample: ::std::os::raw::c_int,
    pub user_data: *mut ::std::os::raw::c_void,
    pub id: espeak_EVENT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union espeak_EVENT__bindgen_ty_1 {
    pub number: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub string: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_espeak_EVENT__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<espeak_EVENT__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(espeak_EVENT__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<espeak_EVENT__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(espeak_EVENT__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_EVENT__bindgen_ty_1>())).number as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT__bindgen_ty_1),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_EVENT__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
}
#[test]
fn bindgen_test_layout_espeak_EVENT() {
    assert_eq!(
        ::std::mem::size_of::<espeak_EVENT>(),
        40usize,
        concat!("Size of: ", stringify!(espeak_EVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<espeak_EVENT>(),
        8usize,
        concat!("Alignment of ", stringify!(espeak_EVENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).unique_identifier as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(unique_identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).text_position as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(text_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).length as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).audio_position as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(audio_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).sample as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).user_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_EVENT>())).id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_EVENT),
            "::",
            stringify!(id)
        )
    );
}
pub const espeak_POSITION_TYPE_POS_CHARACTER: espeak_POSITION_TYPE = 1;
pub const espeak_POSITION_TYPE_POS_WORD: espeak_POSITION_TYPE = 2;
pub const espeak_POSITION_TYPE_POS_SENTENCE: espeak_POSITION_TYPE = 3;
pub type espeak_POSITION_TYPE = ::std::os::raw::c_uint;
pub const espeak_AUDIO_OUTPUT_AUDIO_OUTPUT_PLAYBACK: espeak_AUDIO_OUTPUT = 0;
pub const espeak_AUDIO_OUTPUT_AUDIO_OUTPUT_RETRIEVAL: espeak_AUDIO_OUTPUT = 1;
pub const espeak_AUDIO_OUTPUT_AUDIO_OUTPUT_SYNCHRONOUS: espeak_AUDIO_OUTPUT = 2;
pub const espeak_AUDIO_OUTPUT_AUDIO_OUTPUT_SYNCH_PLAYBACK: espeak_AUDIO_OUTPUT = 3;
pub type espeak_AUDIO_OUTPUT = ::std::os::raw::c_uint;
pub const espeak_ERROR_EE_OK: espeak_ERROR = 0;
pub const espeak_ERROR_EE_INTERNAL_ERROR: espeak_ERROR = -1;
pub const espeak_ERROR_EE_BUFFER_FULL: espeak_ERROR = 1;
pub const espeak_ERROR_EE_NOT_FOUND: espeak_ERROR = 2;
pub type espeak_ERROR = ::std::os::raw::c_int;
extern "C" {
    pub fn espeak_Initialize(
        output: espeak_AUDIO_OUTPUT,
        buflength: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type t_espeak_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_int,
        arg3: *mut espeak_EVENT,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn espeak_SetSynthCallback(SynthCallback: t_espeak_callback);
}
extern "C" {
    pub fn espeak_SetUriCallback(
        UriCallback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *const ::std::os::raw::c_char,
                arg3: *const ::std::os::raw::c_char,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn espeak_SetPhonemeCallback(
        PhonemeCallback: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn espeak_Synth(
        text: *const ::std::os::raw::c_void,
        size: size_t,
        position: ::std::os::raw::c_uint,
        position_type: espeak_POSITION_TYPE,
        end_position: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        unique_identifier: *mut ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_Synth_Mark(
        text: *const ::std::os::raw::c_void,
        size: size_t,
        index_mark: *const ::std::os::raw::c_char,
        end_position: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        unique_identifier: *mut ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_Key(key_name: *const ::std::os::raw::c_char) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_Char(character: wchar_t) -> espeak_ERROR;
}
pub const espeak_PARAMETER_espeakSILENCE: espeak_PARAMETER = 0;
pub const espeak_PARAMETER_espeakRATE: espeak_PARAMETER = 1;
pub const espeak_PARAMETER_espeakVOLUME: espeak_PARAMETER = 2;
pub const espeak_PARAMETER_espeakPITCH: espeak_PARAMETER = 3;
pub const espeak_PARAMETER_espeakRANGE: espeak_PARAMETER = 4;
pub const espeak_PARAMETER_espeakPUNCTUATION: espeak_PARAMETER = 5;
pub const espeak_PARAMETER_espeakCAPITALS: espeak_PARAMETER = 6;
pub const espeak_PARAMETER_espeakWORDGAP: espeak_PARAMETER = 7;
pub const espeak_PARAMETER_espeakOPTIONS: espeak_PARAMETER = 8;
pub const espeak_PARAMETER_espeakINTONATION: espeak_PARAMETER = 9;
pub const espeak_PARAMETER_espeakRESERVED1: espeak_PARAMETER = 10;
pub const espeak_PARAMETER_espeakRESERVED2: espeak_PARAMETER = 11;
pub const espeak_PARAMETER_espeakEMPHASIS: espeak_PARAMETER = 12;
pub const espeak_PARAMETER_espeakLINELENGTH: espeak_PARAMETER = 13;
pub const espeak_PARAMETER_espeakVOICETYPE: espeak_PARAMETER = 14;
pub const espeak_PARAMETER_N_SPEECH_PARAM: espeak_PARAMETER = 15;
pub type espeak_PARAMETER = ::std::os::raw::c_uint;
pub const espeak_PUNCT_TYPE_espeakPUNCT_NONE: espeak_PUNCT_TYPE = 0;
pub const espeak_PUNCT_TYPE_espeakPUNCT_ALL: espeak_PUNCT_TYPE = 1;
pub const espeak_PUNCT_TYPE_espeakPUNCT_SOME: espeak_PUNCT_TYPE = 2;
pub type espeak_PUNCT_TYPE = ::std::os::raw::c_uint;
extern "C" {
    pub fn espeak_SetParameter(
        parameter: espeak_PARAMETER,
        value: ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
    ) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_GetParameter(
        parameter: espeak_PARAMETER,
        current: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn espeak_SetPunctuationList(punctlist: *const wchar_t) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_SetPhonemeTrace(phonememode: ::std::os::raw::c_int, stream: *mut FILE);
}
extern "C" {
    pub fn espeak_TextToPhonemes(
        textptr: *mut *const ::std::os::raw::c_void,
        textmode: ::std::os::raw::c_int,
        phonememode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn espeak_CompileDictionary(
        path: *const ::std::os::raw::c_char,
        log: *mut FILE,
        flags: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct espeak_VOICE {
    pub name: *const ::std::os::raw::c_char,
    pub languages: *const ::std::os::raw::c_char,
    pub identifier: *const ::std::os::raw::c_char,
    pub gender: ::std::os::raw::c_uchar,
    pub age: ::std::os::raw::c_uchar,
    pub variant: ::std::os::raw::c_uchar,
    pub xx1: ::std::os::raw::c_uchar,
    pub score: ::std::os::raw::c_int,
    pub spare: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_espeak_VOICE() {
    assert_eq!(
        ::std::mem::size_of::<espeak_VOICE>(),
        40usize,
        concat!("Size of: ", stringify!(espeak_VOICE))
    );
    assert_eq!(
        ::std::mem::align_of::<espeak_VOICE>(),
        8usize,
        concat!("Alignment of ", stringify!(espeak_VOICE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).languages as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(languages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).identifier as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).gender as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(gender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).age as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(age)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).variant as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(variant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).xx1 as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(xx1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).score as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<espeak_VOICE>())).spare as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_VOICE),
            "::",
            stringify!(spare)
        )
    );
}
extern "C" {
    pub fn espeak_ListVoices(voice_spec: *mut espeak_VOICE) -> *mut *const espeak_VOICE;
}
extern "C" {
    pub fn espeak_SetVoiceByFile(filename: *const ::std::os::raw::c_char) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_SetVoiceByName(name: *const ::std::os::raw::c_char) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_SetVoiceByProperties(voice_spec: *mut espeak_VOICE) -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_GetCurrentVoice() -> *mut espeak_VOICE;
}
extern "C" {
    pub fn espeak_Cancel() -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_IsPlaying() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn espeak_Synchronize() -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_Terminate() -> espeak_ERROR;
}
extern "C" {
    pub fn espeak_Info(
        path_data: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const espeak_ng_STATUS_ENS_GROUP_MASK: espeak_ng_STATUS = 1879048192;
pub const espeak_ng_STATUS_ENS_GROUP_ERRNO: espeak_ng_STATUS = 0;
pub const espeak_ng_STATUS_ENS_GROUP_ESPEAK_NG: espeak_ng_STATUS = 268435456;
pub const espeak_ng_STATUS_ENS_OK: espeak_ng_STATUS = 0;
pub const espeak_ng_STATUS_ENS_COMPILE_ERROR: espeak_ng_STATUS = 268435967;
pub const espeak_ng_STATUS_ENS_VERSION_MISMATCH: espeak_ng_STATUS = 268436223;
pub const espeak_ng_STATUS_ENS_FIFO_BUFFER_FULL: espeak_ng_STATUS = 268436479;
pub const espeak_ng_STATUS_ENS_NOT_INITIALIZED: espeak_ng_STATUS = 268436735;
pub const espeak_ng_STATUS_ENS_AUDIO_ERROR: espeak_ng_STATUS = 268436991;
pub const espeak_ng_STATUS_ENS_VOICE_NOT_FOUND: espeak_ng_STATUS = 268437247;
pub const espeak_ng_STATUS_ENS_MBROLA_NOT_FOUND: espeak_ng_STATUS = 268437503;
pub const espeak_ng_STATUS_ENS_MBROLA_VOICE_NOT_FOUND: espeak_ng_STATUS = 268437759;
pub const espeak_ng_STATUS_ENS_EVENT_BUFFER_FULL: espeak_ng_STATUS = 268438015;
pub const espeak_ng_STATUS_ENS_NOT_SUPPORTED: espeak_ng_STATUS = 268438271;
pub const espeak_ng_STATUS_ENS_UNSUPPORTED_PHON_FORMAT: espeak_ng_STATUS = 268438527;
pub const espeak_ng_STATUS_ENS_NO_SPECT_FRAMES: espeak_ng_STATUS = 268438783;
pub const espeak_ng_STATUS_ENS_EMPTY_PHONEME_MANIFEST: espeak_ng_STATUS = 268439039;
pub const espeak_ng_STATUS_ENS_SPEECH_STOPPED: espeak_ng_STATUS = 268439295;
pub const espeak_ng_STATUS_ENS_UNKNOWN_PHONEME_FEATURE: espeak_ng_STATUS = 268439551;
pub const espeak_ng_STATUS_ENS_UNKNOWN_TEXT_ENCODING: espeak_ng_STATUS = 268439807;
pub type espeak_ng_STATUS = ::std::os::raw::c_uint;
pub const espeak_ng_OUTPUT_MODE_ENOUTPUT_MODE_SYNCHRONOUS: espeak_ng_OUTPUT_MODE = 1;
pub const espeak_ng_OUTPUT_MODE_ENOUTPUT_MODE_SPEAK_AUDIO: espeak_ng_OUTPUT_MODE = 2;
pub type espeak_ng_OUTPUT_MODE = ::std::os::raw::c_uint;
pub const espeak_ng_VOICE_GENDER_ENGENDER_UNKNOWN: espeak_ng_VOICE_GENDER = 0;
pub const espeak_ng_VOICE_GENDER_ENGENDER_MALE: espeak_ng_VOICE_GENDER = 1;
pub const espeak_ng_VOICE_GENDER_ENGENDER_FEMALE: espeak_ng_VOICE_GENDER = 2;
pub const espeak_ng_VOICE_GENDER_ENGENDER_NEUTRAL: espeak_ng_VOICE_GENDER = 3;
pub type espeak_ng_VOICE_GENDER = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct espeak_ng_OUTPUT_HOOKS {
    pub outputPhoSymbol: ::std::option::Option<
        unsafe extern "C" fn(
            pho_code: *mut ::std::os::raw::c_char,
            pho_type: ::std::os::raw::c_int,
        ),
    >,
    pub outputSilence:
        ::std::option::Option<unsafe extern "C" fn(echo_tail: ::std::os::raw::c_short)>,
    pub outputVoiced: ::std::option::Option<unsafe extern "C" fn(sample: ::std::os::raw::c_short)>,
    pub outputUnvoiced:
        ::std::option::Option<unsafe extern "C" fn(sample: ::std::os::raw::c_short)>,
}
#[test]
fn bindgen_test_layout_espeak_ng_OUTPUT_HOOKS() {
    assert_eq!(
        ::std::mem::size_of::<espeak_ng_OUTPUT_HOOKS>(),
        32usize,
        concat!("Size of: ", stringify!(espeak_ng_OUTPUT_HOOKS))
    );
    assert_eq!(
        ::std::mem::align_of::<espeak_ng_OUTPUT_HOOKS>(),
        8usize,
        concat!("Alignment of ", stringify!(espeak_ng_OUTPUT_HOOKS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_ng_OUTPUT_HOOKS>())).outputPhoSymbol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_ng_OUTPUT_HOOKS),
            "::",
            stringify!(outputPhoSymbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_ng_OUTPUT_HOOKS>())).outputSilence as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_ng_OUTPUT_HOOKS),
            "::",
            stringify!(outputSilence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_ng_OUTPUT_HOOKS>())).outputVoiced as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_ng_OUTPUT_HOOKS),
            "::",
            stringify!(outputVoiced)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<espeak_ng_OUTPUT_HOOKS>())).outputUnvoiced as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(espeak_ng_OUTPUT_HOOKS),
            "::",
            stringify!(outputUnvoiced)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct espeak_ng_ERROR_CONTEXT_ {
    _unused: [u8; 0],
}
pub type espeak_ng_ERROR_CONTEXT = *mut espeak_ng_ERROR_CONTEXT_;
extern "C" {
    pub fn espeak_ng_ClearErrorContext(context: *mut espeak_ng_ERROR_CONTEXT);
}
extern "C" {
    pub fn espeak_ng_GetStatusCodeMessage(
        status: espeak_ng_STATUS,
        buffer: *mut ::std::os::raw::c_char,
        length: size_t,
    );
}
extern "C" {
    pub fn espeak_ng_PrintStatusCodeMessage(
        status: espeak_ng_STATUS,
        out: *mut FILE,
        context: espeak_ng_ERROR_CONTEXT,
    );
}
extern "C" {
    pub fn espeak_ng_InitializePath(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn espeak_ng_Initialize(context: *mut espeak_ng_ERROR_CONTEXT) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_InitializeOutput(
        output_mode: espeak_ng_OUTPUT_MODE,
        buffer_length: ::std::os::raw::c_int,
        device: *const ::std::os::raw::c_char,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_GetSampleRate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn espeak_ng_SetParameter(
        parameter: espeak_PARAMETER,
        value: ::std::os::raw::c_int,
        relative: ::std::os::raw::c_int,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetPunctuationList(punctlist: *const wchar_t) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetVoiceByName(name: *const ::std::os::raw::c_char) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetVoiceByFile(filename: *const ::std::os::raw::c_char) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetVoiceByProperties(voice_selector: *mut espeak_VOICE) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_Synthesize(
        text: *const ::std::os::raw::c_void,
        size: size_t,
        position: ::std::os::raw::c_uint,
        position_type: espeak_POSITION_TYPE,
        end_position: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        unique_identifier: *mut ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SynthesizeMark(
        text: *const ::std::os::raw::c_void,
        size: size_t,
        index_mark: *const ::std::os::raw::c_char,
        end_position: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        unique_identifier: *mut ::std::os::raw::c_uint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SpeakKeyName(key_name: *const ::std::os::raw::c_char) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SpeakCharacter(character: wchar_t) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_Cancel() -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_Synchronize() -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_Terminate() -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_CompileDictionary(
        dsource: *const ::std::os::raw::c_char,
        dict_name: *const ::std::os::raw::c_char,
        log: *mut FILE,
        flags: ::std::os::raw::c_int,
        context: *mut espeak_ng_ERROR_CONTEXT,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_CompileMbrolaVoice(
        path: *const ::std::os::raw::c_char,
        log: *mut FILE,
        context: *mut espeak_ng_ERROR_CONTEXT,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_CompilePhonemeData(
        rate: ::std::os::raw::c_long,
        log: *mut FILE,
        context: *mut espeak_ng_ERROR_CONTEXT,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_CompileIntonation(
        log: *mut FILE,
        context: *mut espeak_ng_ERROR_CONTEXT,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_CompilePhonemeDataPath(
        rate: ::std::os::raw::c_long,
        source_path: *const ::std::os::raw::c_char,
        destination_path: *const ::std::os::raw::c_char,
        log: *mut FILE,
        context: *mut espeak_ng_ERROR_CONTEXT,
    ) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetOutputHooks(hooks: *mut espeak_ng_OUTPUT_HOOKS) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn espeak_ng_SetConstF0(f0: ::std::os::raw::c_int) -> espeak_ng_STATUS;
}
extern "C" {
    pub fn vocalid_TextToIPA(
        in_text: *const ::std::os::raw::c_char,
        language: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
